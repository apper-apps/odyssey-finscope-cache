import { useState, useEffect } from "react"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/atoms/Card"
import Button from "@/components/atoms/Button"
import Input from "@/components/atoms/Input"
import Select from "@/components/atoms/Select"
import FormField from "@/components/molecules/FormField"
import TabNavigation from "@/components/molecules/TabNavigation"
import ApperIcon from "@/components/ApperIcon"
import useLocalStorage from "@/hooks/useLocalStorage"
import { toast } from "react-toastify"

const Settings = () => {
  const [activeTab, setActiveTab] = useState("company")
  const [saving, setSaving] = useState(false)

  // Company settings
  const [companySettings, setCompanySettings] = useLocalStorage("companySettings", {
    companyName: "FinScope Pro Analytics",
    industry: "Financial Services",
    fiscalYearEnd: "December",
    currency: "USD",
    timezone: "America/New_York",
    reportingStandard: "GAAP"
  })

  // Report template settings
  const [reportSettings, setReportSettings] = useLocalStorage("reportSettings", {
    defaultTemplate: "comprehensive",
    includeLogo: true,
    includeExecutiveSummary: true,
    includeCharts: true,
    includeRecommendations: true,
    footerText: "Generated by FinScope Pro",
    pageFormat: "A4",
    orientation: "portrait"
  })

  // Export preferences
  const [exportSettings, setExportSettings] = useLocalStorage("exportSettings", {
    defaultFormat: "PDF",
    includeRawData: false,
    watermark: true,
    compression: "medium",
    colorScheme: "professional",
    fontSize: "medium"
  })

  // Notification settings
  const [notificationSettings, setNotificationSettings] = useLocalStorage("notificationSettings", {
    emailNotifications: true,
    reportGenerated: true,
    dataImported: true,
    systemUpdates: false,
    marketingEmails: false
  })

  const tabs = [
    { id: "company", label: "Company Profile" },
    { id: "reports", label: "Report Templates" },
    { id: "export", label: "Export Preferences" },
    { id: "notifications", label: "Notifications" }
  ]

  const handleSaveSettings = async () => {
    setSaving(true)
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      toast.success("Settings saved successfully!")
    } catch (error) {
      toast.error("Failed to save settings")
    } finally {
      setSaving(false)
    }
  }

  const handleResetSettings = () => {
    if (window.confirm("Are you sure you want to reset all settings to default values?")) {
      localStorage.removeItem("companySettings")
      localStorage.removeItem("reportSettings")
      localStorage.removeItem("exportSettings")
      localStorage.removeItem("notificationSettings")
      window.location.reload()
    }
  }

  const updateCompanySetting = (field, value) => {
    setCompanySettings(prev => ({ ...prev, [field]: value }))
  }

  const updateReportSetting = (field, value) => {
    setReportSettings(prev => ({ ...prev, [field]: value }))
  }

  const updateExportSetting = (field, value) => {
    setExportSettings(prev => ({ ...prev, [field]: value }))
  }

  const updateNotificationSetting = (field, value) => {
    setNotificationSettings(prev => ({ ...prev, [field]: value }))
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold gradient-text">Settings</h1>
          <p className="text-gray-600 mt-2">
            Configure your financial analysis platform preferences
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline" onClick={handleResetSettings}>
            <ApperIcon name="RotateCcw" className="h-4 w-4 mr-2" />
            Reset to Default
          </Button>
          <Button onClick={handleSaveSettings} disabled={saving}>
            {saving && <ApperIcon name="Loader2" className="h-4 w-4 mr-2 animate-spin" />}
            {saving ? "Saving..." : "Save Changes"}
          </Button>
        </div>
      </div>

      {/* Settings Tabs */}
      <Card>
        <CardHeader>
          <TabNavigation
            tabs={tabs}
            activeTab={activeTab}
            onChange={setActiveTab}
          />
        </CardHeader>
        <CardContent className="pt-6">
          {/* Company Profile Tab */}
          {activeTab === "company" && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  label="Company Name"
                  value={companySettings.companyName}
                  onChange={(e) => updateCompanySetting("companyName", e.target.value)}
                  placeholder="Enter company name"
                />
                <FormField
                  label="Industry"
                >
                  <Select
                    value={companySettings.industry}
                    onChange={(e) => updateCompanySetting("industry", e.target.value)}
                  >
                    <option value="Financial Services">Financial Services</option>
                    <option value="Technology">Technology</option>
                    <option value="Healthcare">Healthcare</option>
                    <option value="Manufacturing">Manufacturing</option>
                    <option value="Retail">Retail</option>
                    <option value="Real Estate">Real Estate</option>
                    <option value="Energy">Energy</option>
                    <option value="Other">Other</option>
                  </Select>
                </FormField>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <FormField
                  label="Fiscal Year End"
                >
                  <Select
                    value={companySettings.fiscalYearEnd}
                    onChange={(e) => updateCompanySetting("fiscalYearEnd", e.target.value)}
                  >
                    <option value="January">January</option>
                    <option value="February">February</option>
                    <option value="March">March</option>
                    <option value="April">April</option>
                    <option value="May">May</option>
                    <option value="June">June</option>
                    <option value="July">July</option>
                    <option value="August">August</option>
                    <option value="September">September</option>
                    <option value="October">October</option>
                    <option value="November">November</option>
                    <option value="December">December</option>
                  </Select>
                </FormField>

                <FormField
                  label="Currency"
                >
                  <Select
                    value={companySettings.currency}
                    onChange={(e) => updateCompanySetting("currency", e.target.value)}
                  >
                    <option value="USD">USD - US Dollar</option>
                    <option value="EUR">EUR - Euro</option>
                    <option value="GBP">GBP - British Pound</option>
                    <option value="CAD">CAD - Canadian Dollar</option>
                    <option value="AUD">AUD - Australian Dollar</option>
                    <option value="JPY">JPY - Japanese Yen</option>
                  </Select>
                </FormField>

                <FormField
                  label="Reporting Standard"
                >
                  <Select
                    value={companySettings.reportingStandard}
                    onChange={(e) => updateCompanySetting("reportingStandard", e.target.value)}
                  >
                    <option value="GAAP">US GAAP</option>
                    <option value="IFRS">IFRS</option>
                    <option value="Other">Other</option>
                  </Select>
                </FormField>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <ApperIcon name="Info" className="h-5 w-5 text-blue-600 mt-0.5" />
                  <div className="text-sm text-blue-800">
                    <p className="font-medium mb-1">Company Profile Information</p>
                    <p>These settings affect how your financial reports are formatted and calculations are performed. Changes will apply to all new reports generated.</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Report Templates Tab */}
          {activeTab === "reports" && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  label="Default Template"
                >
                  <Select
                    value={reportSettings.defaultTemplate}
                    onChange={(e) => updateReportSetting("defaultTemplate", e.target.value)}
                  >
                    <option value="comprehensive">Comprehensive Analysis</option>
                    <option value="executive">Executive Summary</option>
                    <option value="detailed">Detailed Financial Review</option>
                    <option value="custom">Custom Template</option>
                  </Select>
                </FormField>

                <FormField
                  label="Footer Text"
                  value={reportSettings.footerText}
                  onChange={(e) => updateReportSetting("footerText", e.target.value)}
                  placeholder="Enter footer text for reports"
                />
              </div>

              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4">Report Content Options</h4>
                <div className="space-y-3">
                  {[
                    { key: "includeLogo", label: "Include Company Logo", description: "Add company logo to report headers" },
                    { key: "includeExecutiveSummary", label: "Executive Summary", description: "Include executive summary section" },
                    { key: "includeCharts", label: "Charts & Visualizations", description: "Include financial charts and graphs" },
                    { key: "includeRecommendations", label: "Recommendations", description: "Include analysis recommendations" }
                  ].map((option) => (
                    <div key={option.key} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{option.label}</p>
                        <p className="text-sm text-gray-500">{option.description}</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={reportSettings[option.key]}
                          onChange={(e) => updateReportSetting(option.key, e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  label="Page Format"
                >
                  <Select
                    value={reportSettings.pageFormat}
                    onChange={(e) => updateReportSetting("pageFormat", e.target.value)}
                  >
                    <option value="A4">A4</option>
                    <option value="Letter">Letter</option>
                    <option value="Legal">Legal</option>
                  </Select>
                </FormField>

                <FormField
                  label="Orientation"
                >
                  <Select
                    value={reportSettings.orientation}
                    onChange={(e) => updateReportSetting("orientation", e.target.value)}
                  >
                    <option value="portrait">Portrait</option>
                    <option value="landscape">Landscape</option>
                  </Select>
                </FormField>
              </div>
            </div>
          )}

          {/* Export Preferences Tab */}
          {activeTab === "export" && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <FormField
                  label="Default Format"
                >
                  <Select
                    value={exportSettings.defaultFormat}
                    onChange={(e) => updateExportSetting("defaultFormat", e.target.value)}
                  >
                    <option value="PDF">PDF</option>
                    <option value="Excel">Excel</option>
                    <option value="Word">Word</option>
                  </Select>
                </FormField>

                <FormField
                  label="Compression"
                >
                  <Select
                    value={exportSettings.compression}
                    onChange={(e) => updateExportSetting("compression", e.target.value)}
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </Select>
                </FormField>

                <FormField
                  label="Font Size"
                >
                  <Select
                    value={exportSettings.fontSize}
                    onChange={(e) => updateExportSetting("fontSize", e.target.value)}
                  >
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                  </Select>
                </FormField>
              </div>

              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4">Export Options</h4>
                <div className="space-y-3">
                  {[
                    { key: "includeRawData", label: "Include Raw Data", description: "Include underlying financial data in export" },
                    { key: "watermark", label: "Add Watermark", description: "Add company watermark to exported documents" }
                  ].map((option) => (
                    <div key={option.key} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{option.label}</p>
                        <p className="text-sm text-gray-500">{option.description}</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={exportSettings[option.key]}
                          onChange={(e) => updateExportSetting(option.key, e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <FormField
                label="Color Scheme"
              >
                <Select
                  value={exportSettings.colorScheme}
                  onChange={(e) => updateExportSetting("colorScheme", e.target.value)}
                >
                  <option value="professional">Professional</option>
                  <option value="corporate">Corporate</option>
                  <option value="modern">Modern</option>
                  <option value="minimal">Minimal</option>
                </Select>
              </FormField>
            </div>
          )}

          {/* Notifications Tab */}
          {activeTab === "notifications" && (
            <div className="space-y-6">
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4">Email Notifications</h4>
                <div className="space-y-3">
                  {[
                    { key: "emailNotifications", label: "Email Notifications", description: "Enable all email notifications" },
                    { key: "reportGenerated", label: "Report Generated", description: "Notify when reports are completed" },
                    { key: "dataImported", label: "Data Imported", description: "Notify when financial data is imported" },
                    { key: "systemUpdates", label: "System Updates", description: "Notify about platform updates and maintenance" },
                    { key: "marketingEmails", label: "Marketing Emails", description: "Receive product updates and tips" }
                  ].map((option) => (
                    <div key={option.key} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{option.label}</p>
                        <p className="text-sm text-gray-500">{option.description}</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={notificationSettings[option.key]}
                          onChange={(e) => updateNotificationSetting(option.key, e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <ApperIcon name="Bell" className="h-5 w-5 text-yellow-600 mt-0.5" />
                  <div className="text-sm text-yellow-800">
                    <p className="font-medium mb-1">Notification Preferences</p>
                    <p>You can always update these preferences later. Important security notifications will always be sent regardless of these settings.</p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Save Actions */}
      <div className="flex justify-end gap-3 pb-8">
        <Button variant="outline" onClick={handleResetSettings}>
          Reset All Settings
        </Button>
        <Button onClick={handleSaveSettings} disabled={saving}>
          {saving && <ApperIcon name="Loader2" className="h-4 w-4 mr-2 animate-spin" />}
          {saving ? "Saving..." : "Save All Changes"}
        </Button>
      </div>
    </div>
  )
}

export default Settings